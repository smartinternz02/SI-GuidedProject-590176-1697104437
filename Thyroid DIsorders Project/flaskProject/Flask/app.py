# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VX9v348LXX0mgZAElYZrqutLAG0w3w6K
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install flask-ngrok
!pip install pyngrok==4.1.1
!ngrok authtoken 2XNwkJJNAK4mB2qebijOtpCXA6a_2bfGtabiSXerhZvXk6kRS

from flask.templating import render_template,request
from flask import Flask
from flask_ngrok import run_with_ngrok
import requests
import pickle
import numpy as np
template_folder = '/content/drive/MyDrive/Thyroid/flask/templates'
static_folder = '/content/drive/MyDrive/Thyroid/flask/Static'

app = Flask(__name__,template_folder=template_folder,static_folder = static_folder)
run_with_ngrok(app)

with open("/content/drive/MyDrive/Thyroid/flask/Training/thyroid_1_model.pkl","rb") as model_file:
    model=pickle.load(model_file)

@app.route("/")
@app.route("/home")
def home():
   return render_template('home.html')

@app.route("/predict",methods = ["GET","POST"])
def predict():
   return render_template('predict.html')

@app.route("/predictresult", methods = ["GET", "POST"])
def predictresult():
   if request.method == "POST":
        Age=float(request.form.get('age'))
        Sex= request.form.get('sex')
        Level_thyroid_stimulating_hormone= float(request.form.get('TSH'))
        Free_thyroxine_index=float(request.form.get('FTI'))
        Total_thyroxine_TT4= float(request.form.get('TT4'))
        On_thyroxine= request.form.get('on_thyroxine')
        T3_measured= request.form.get('T3_measured')
        #Sex
        if Sex=="Male":
            Sex=1
        else:
            Sex=0
        #On_thyroxine
        if On_thyroxine=="True":
            On_thyroxine=1
        else:
            On_thyroxine=0

        #T3_measured
        if T3_measured=="True":
            T3_measured=1
        else:
            T3_measured=0
        arr=np.array([[Age,Sex,Level_thyroid_stimulating_hormone,Free_thyroxine_index,Total_thyroxine_TT4,
        On_thyroxine,T3_measured]])
        pred=model.predict(arr)
        if pred==0:
            res_Val="Compensated Hypothyroid"
        elif pred==1:
            res_Val="No Thyroid"
        elif pred==2:
            res_Val='Primary Hypothyroid'
        elif pred==3:
            res_Val='Secondary Hypothyroid'
        Output=f"Patient has {res_Val}"
        return render_template('predictresults.html',output=Output)


   return render_template("home.html")

app.run()